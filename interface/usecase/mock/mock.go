// Code generated by MockGen. DO NOT EDIT.
// Source: interface/usecase/student.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
gomock "github.com/golang/mock/gomock"
model "golang-bootcamp-2020/domain/model"
reflect "reflect"
)

// MockStudentService is a mock of StudentService interface
type MockStudentService struct {
	ctrl     *gomock.Controller
	recorder *MockStudentServiceMockRecorder
}

// MockStudentServiceMockRecorder is the mock recorder for MockStudentService
type MockStudentServiceMockRecorder struct {
	mock *MockStudentService
}

// NewMockStudentService creates a new mock instance
func NewMockStudentService(ctrl *gomock.Controller) *MockStudentService {
	mock := &MockStudentService{ctrl: ctrl}
	mock.recorder = &MockStudentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStudentService) EXPECT() *MockStudentServiceMockRecorder {
	return m.recorder
}

// ReadStudentsService mocks base method
func (m *MockStudentService) ReadStudentsService(filePath string) ([]model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStudentsService", filePath)
	ret0, _ := ret[0].([]model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStudentsService indicates an expected call of ReadStudentsService
func (mr *MockStudentServiceMockRecorder) ReadStudentsService(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStudentsService", reflect.TypeOf((*MockStudentService)(nil).ReadStudentsService), filePath)
}

// StoreURLService mocks base method
func (m *MockStudentService) StoreURLService(apiURL string) ([]model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreURLService", apiURL)
	ret0, _ := ret[0].([]model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreURLService indicates an expected call of StoreURLService
func (mr *MockStudentServiceMockRecorder) StoreURLService(apiURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreURLService", reflect.TypeOf((*MockStudentService)(nil).StoreURLService), apiURL)
}

// SaveToCsv mocks base method
func (m *MockStudentService) SaveToCsv(students []model.Student, filePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToCsv", students, filePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveToCsv indicates an expected call of SaveToCsv
func (mr *MockStudentServiceMockRecorder) SaveToCsv(students, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToCsv", reflect.TypeOf((*MockStudentService)(nil).SaveToCsv), students, filePath)
}

